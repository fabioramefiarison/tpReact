{"ast":null,"code":"import { useEffect } from \"react\";\nimport { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from \"@google/generative-ai\";\n\n// Lire la clé API depuis les variables d'environnement\nconst apiKey = process.env.REACT_APP_GEMINI_API_KEY;\nif (!apiKey) {\n  throw new Error(\"API key for Gemini is missing. Please set REACT_APP_GEMINI_API_KEY in your .env file.\");\n} else {\n  console.log(\"API Key found:\", apiKey); // Vérifier que la clé API est lue correctement\n}\nconst genAI = new GoogleGenerativeAI(apiKey);\nconst model = genAI.getGenerativeModel({\n  model: \"gemini-1.5-flash\"\n});\nconst generationConfig = {\n  temperature: 1,\n  topP: 0.95,\n  topK: 64,\n  maxOutputTokens: 8192,\n  responseMimeType: \"text/plain\"\n};\nasync function run(prompt) {\n  const chatSession = model.startChat({\n    generationConfig,\n    // safetySettings: Adjust safety settings\n    // See https://ai.google.dev/gemini-api/docs/safety-settings\n    history: []\n  });\n  try {\n    const result = await chatSession.sendMessage(prompt);\n    console.log(result.response.text());\n  } catch (error) {\n    console.error(\"Error during API call:\", error);\n  }\n}\nexport default run;","map":{"version":3,"names":["useEffect","GoogleGenerativeAI","HarmCategory","HarmBlockThreshold","apiKey","process","env","REACT_APP_GEMINI_API_KEY","Error","console","log","genAI","model","getGenerativeModel","generationConfig","temperature","topP","topK","maxOutputTokens","responseMimeType","run","prompt","chatSession","startChat","history","result","sendMessage","response","text","error"],"sources":["E:/T E C/R E A C T/projet-4/src/API/Gemini.js"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport {\r\n  GoogleGenerativeAI,\r\n  HarmCategory,\r\n  HarmBlockThreshold,\r\n} from \"@google/generative-ai\";\r\n\r\n// Lire la clé API depuis les variables d'environnement\r\nconst apiKey = process.env.REACT_APP_GEMINI_API_KEY;\r\n\r\nif (!apiKey) {\r\n  throw new Error(\"API key for Gemini is missing. Please set REACT_APP_GEMINI_API_KEY in your .env file.\");\r\n} else {\r\n  console.log(\"API Key found:\", apiKey); // Vérifier que la clé API est lue correctement\r\n}\r\n\r\nconst genAI = new GoogleGenerativeAI(apiKey);\r\n\r\nconst model = genAI.getGenerativeModel({\r\n  model: \"gemini-1.5-flash\",\r\n});\r\n\r\nconst generationConfig = {\r\n  temperature: 1,\r\n  topP: 0.95,\r\n  topK: 64,\r\n  maxOutputTokens: 8192,\r\n  responseMimeType: \"text/plain\",\r\n};\r\n\r\nasync function run(prompt) {\r\n  const chatSession = model.startChat({\r\n    generationConfig,\r\n    // safetySettings: Adjust safety settings\r\n    // See https://ai.google.dev/gemini-api/docs/safety-settings\r\n    history: [],\r\n  });\r\n\r\n  try {\r\n    const result = await chatSession.sendMessage(prompt);\r\n    console.log(result.response.text());\r\n  } catch (error) {\r\n    console.error(\"Error during API call:\", error);\r\n  }\r\n}\r\n\r\nexport default run;\r\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SACEC,kBAAkB,EAClBC,YAAY,EACZC,kBAAkB,QACb,uBAAuB;;AAE9B;AACA,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB;AAEnD,IAAI,CAACH,MAAM,EAAE;EACX,MAAM,IAAII,KAAK,CAAC,uFAAuF,CAAC;AAC1G,CAAC,MAAM;EACLC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEN,MAAM,CAAC,CAAC,CAAC;AACzC;AAEA,MAAMO,KAAK,GAAG,IAAIV,kBAAkB,CAACG,MAAM,CAAC;AAE5C,MAAMQ,KAAK,GAAGD,KAAK,CAACE,kBAAkB,CAAC;EACrCD,KAAK,EAAE;AACT,CAAC,CAAC;AAEF,MAAME,gBAAgB,GAAG;EACvBC,WAAW,EAAE,CAAC;EACdC,IAAI,EAAE,IAAI;EACVC,IAAI,EAAE,EAAE;EACRC,eAAe,EAAE,IAAI;EACrBC,gBAAgB,EAAE;AACpB,CAAC;AAED,eAAeC,GAAGA,CAACC,MAAM,EAAE;EACzB,MAAMC,WAAW,GAAGV,KAAK,CAACW,SAAS,CAAC;IAClCT,gBAAgB;IAChB;IACA;IACAU,OAAO,EAAE;EACX,CAAC,CAAC;EAEF,IAAI;IACF,MAAMC,MAAM,GAAG,MAAMH,WAAW,CAACI,WAAW,CAACL,MAAM,CAAC;IACpDZ,OAAO,CAACC,GAAG,CAACe,MAAM,CAACE,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC;EACrC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdpB,OAAO,CAACoB,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;EAChD;AACF;AAEA,eAAeT,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}